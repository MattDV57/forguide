# * Copyright 2024 Google LLC
# *
# * Licensed under the Apache License, Version 2.0 (the "License");
# * you may not use this file except in compliance with the License.
# * You may obtain a copy of the License at
# *
# *      http://www.apache.org/licenses/LICENSE-2.0
# *
# * Unless required by applicable law or agreed to in writing, software
# * distributed under the License is distributed on an "AS IS" BASIS,
# * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# * See the License for the specific language governing permissions and
# * limitations under the License.

# Cloud Build Trigger
resource "google_cloudbuild_trigger" "api_webhook_trigger" {
  project     = module.project.project_id
  name        = "drive-transfer-service-api-deploy"
  description = "Webhook trigger invoked by SSM to deploy API"

  webhook_config {
    secret = "${module.secret_manager_secrets["ssm-webhook-secret"].ids["ssm-webhook-secret"]}/versions/latest"
  }

  build {
    logs_bucket = "gs://${module.cb_logs_bucket.name}/api"
    options {
      log_streaming_option = "STREAM_ON"
      logging              = "GCS_ONLY"
      machine_type         = "N1_HIGHCPU_32"
    }
    step {
     id         = "git-clone-ssm"
     name       = "gcr.io/cloud-builders/git"
     entrypoint = "sh"
     args = [
       "-xe",
       "-c",
       <<-EOT
       git clone $${_REPO} .
       EOT
     ]
    }
    #step {
    #  id         = "git-fetch-tag"
    #  name       = "gcr.io/cloud-builders/git"
    #  dir        = "$${_REPO_DIR}"
    #  entrypoint = "bash"
    #  args = [
    #    "-xe",
    #    "-c",
    #    <<-EOT
    #    git fetch origin $${_TAG}:$${_TAG} --no-tags
    #    git checkout $${_TAG}
    #    EOT
    #  ]
    #}
    step {
      id   = "docker-build"
      name = "gcr.io/cloud-builders/docker"
      env = [
        "_COMMIT_SHA=$${_COMMIT_SHA}"
      ]
      dir        = "$${_REPO_DIR}"
      entrypoint = "sh"
      args = [
        "-xe",
        "-c",
        <<-EOT
        docker build \
        --cache-from $${_REGION}-docker.pkg.dev/$${_AR_PROJECT_ID}/$${_AR_REGISTRY_NAME}/$${_IMAGE}:latest \
        -t=$${_REGION}-docker.pkg.dev/$${_AR_PROJECT_ID}/$${_AR_REGISTRY_NAME}/$${_IMAGE}:$${_COMMIT_SHA} \
        -t=$${_REGION}-docker.pkg.dev/$${_AR_PROJECT_ID}/$${_AR_REGISTRY_NAME}/$${_IMAGE}:latest \
        .
        EOT
      ]
    }
    step {
      id   = "docker-push-sha"
      name = "gcr.io/cloud-builders/docker"
      env = [
        "_COMMIT_SHA=$${_COMMIT_SHA}"
      ]
      dir = "$${_REPO_DIR}"
      args = [
        "push",
        "$${_REGION}-docker.pkg.dev/$${_AR_PROJECT_ID}/$${_AR_REGISTRY_NAME}/$${_IMAGE}:$${_COMMIT_SHA}"
      ]
    }
    step {
      id   = "docker-push-latest"
      name = "gcr.io/cloud-builders/docker"
      dir  = "$${_REPO_DIR}"
      args = [
        "push",
        "$${_REGION}-docker.pkg.dev/$${_AR_PROJECT_ID}/$${_AR_REGISTRY_NAME}/$${_IMAGE}:latest"
      ]
    }
    step {
      id   = "cloud-deploy-release"
      name = "google/cloud-sdk:slim"
      env = [
        "_COMMIT_SHA=$${_COMMIT_SHA}"
      ]
      dir        = "$${_REPO_DIR}"
      entrypoint = "sh"
      args = [
        "-xe",
        "-c",
        <<-EOT
        gcloud config set deploy/region $${_REGION}
        gcloud deploy apply --file cloud_deploy/pipeline.yaml
        gcloud deploy apply --file cloud_deploy/targets.yaml
        gcloud deploy releases create $${_IMAGE}-$$(echo -n $${_COMMIT_SHA} | tail -c 10) \
          --delivery-pipeline=drive-transfer-service \
          --skaffold-version=2.11 \
          --skaffold-file=skaffold.yaml
        EOT
      ]
    }
  }

  substitutions = {
    "_AR_PROJECT_ID"    = module.project.project_id
    "_AR_REGISTRY_NAME" = "drive-transfer-service"
    "_COMMIT_SHA"       = "$(body.after)"
    "_IMAGE"            = "api"
    "_REGION"           = var.default_region
    "_REPO"             = "[SSM_REPO_URI]"
    "_REPO_DIR"         = "api"
    # "_TAG"              = "$(body.ref)"
  }

  service_account = module.bootstrap_service_accounts["drive-transfer-service-api"].id
}

resource "google_cloudbuild_trigger" "ui_webhook_trigger" {
  project     = module.project.project_id
  name        = "drive-transfer-service-ui-deploy"
  description = "Webhook trigger invoked by SSM to deploy UI"

  webhook_config {
    secret = "${module.secret_manager_secrets["ssm-webhook-secret"].ids["ssm-webhook-secret"]}/versions/latest"
  }

  #filter = "_TAG.matches(\"^refs/tags/ui-${var.environment}-.*$\")"
  build {
    logs_bucket = "gs://${module.cb_logs_bucket.name}/ui"
    options {
      log_streaming_option = "STREAM_ON"
      logging              = "GCS_ONLY"
      machine_type         = "N1_HIGHCPU_32"
    }
    step {
     id         = "git-clone-ssm"
     name       = "gcr.io/cloud-builders/git"
     entrypoint = "sh"
     args = [
       "-xe",
       "-c",
       <<-EOT
       git clone $${_REPO} .
       EOT
     ]
    }
    #step {
    #  id         = "git-fetch-tag"
    #  name       = "gcr.io/cloud-builders/git"
    #  dir        = "$${_REPO_DIR}"
    #  entrypoint = "bash"
    #  args = [
    #    "-xe",
    #    "-c",
    #    <<-EOT
    #    git fetch origin $${_TAG}:$${_TAG} --no-tags
    #    git checkout $${_TAG}
    #    EOT
    #  ]
    #}
    step {
      id         = "app-deploy"
      name       = "google/cloud-sdk:slim"
      dir        = "$${_REPO_DIR}"
      entrypoint = "gcloud"
      args = [
        "app",
        "deploy"
      ]
    }
  }

  substitutions = {
    "_REPO"     = "[SSM_REPO_URI]"
    "_REPO_DIR" = "ui"
    #"_TAG"      = "$(body.ref)"
  }

  service_account = module.bootstrap_service_accounts["drive-transfer-service-ui"].id
}

resource "google_cloudbuild_trigger" "tf_plan_webhook_triggers" {
  for_each    = toset(var.terraform_environments)
  project     = module.project.project_id
  name        = "${each.value}-terraform-plan-deploy"
  description = "Webhook trigger invoked by SSM to run ${each.value} Terraform Plan"

  webhook_config {
    secret = "${module.secret_manager_secrets["ssm-webhook-secret"].ids["ssm-webhook-secret"]}/versions/latest"
  }

  #filter = "_TAG.matches(\"^refs/tags/tf-plan-${each.value}-.*$\")"
  build {
    logs_bucket = "gs://${module.cb_logs_bucket.name}/tf/${each.value}/plan"
    options {
      log_streaming_option = "STREAM_ON"
      logging              = "GCS_ONLY"
      machine_type         = "N1_HIGHCPU_32"
    }
    step {
     id         = "git-clone-ssm"
     name       = "gcr.io/cloud-builders/git"
     entrypoint = "sh"
     args = [
       "-xe",
       "-c",
       <<-EOT
       git clone $${_REPO} .
       EOT
     ]
    }
    #step {
    #  id         = "git-fetch-tag"
    #  name       = "gcr.io/cloud-builders/git"
    #  dir        = "$${_REPO_DIR}"
    #  entrypoint = "bash"
    #  args = [
    #    "-xe",
    #    "-c",
    #    <<-EOT
    #    git fetch origin $${_TAG}:$${_TAG} --no-tags
    #    git checkout $${_TAG}
    #    EOT
    #  ]
    #}
    step {
      id         = "tf-init"
      name       = "$${_REGION}-docker.pkg.dev/$${_AR_PROJECT_ID}/$${_AR_REGISTRY_NAME}/$${_IMAGE}:$${_TERRAFORM_VERSION}"
      dir        = "$${_REPO_DIR}/environments/${each.value}"
      entrypoint = "sh"
      args = [
        "-xe",
        "-c",
        <<-EOT
        echo ""
        echo "*************** TERRAFORM INIT ******************"
        echo "******* At environment: ${each.value} *********"
        echo "*************************************************"
        terraform init || exit 1
        EOT
      ]
    }
    step {
      id         = "tf-validate"
      name       = "$${_REGION}-docker.pkg.dev/$${_AR_PROJECT_ID}/$${_AR_REGISTRY_NAME}/$${_IMAGE}:$${_TERRAFORM_VERSION}"
      dir        = "$${_REPO_DIR}/environments/${each.value}"
      entrypoint = "sh"
      args = [
        "-xe",
        "-c",
        <<-EOT
        echo ""
        echo "*************** TERRAFORM VALIDATE ******************"
        echo "******* At environment: ${each.value} *********"
        echo "*************************************************"
        terraform validate || exit 1
        EOT
      ]
    }
    step {
      id         = "tf-plan"
      name       = "$${_REGION}-docker.pkg.dev/$${_AR_PROJECT_ID}/$${_AR_REGISTRY_NAME}/$${_IMAGE}:$${_TERRAFORM_VERSION}"
      dir        = "$${_REPO_DIR}/environments/${each.value}"
      entrypoint = "sh"
      args = [
        "-xe",
        "-c",
        <<-EOT
        echo ""
        echo "*************** TERRAFORM PLAN ******************"
        echo "******* At environment: ${each.value} *********"
        echo "*************************************************"
        terraform plan -lock=false -input=false || exit 1
        EOT
      ]
    }
  }

  substitutions = {
    "_AR_PROJECT_ID"     = module.project.project_id
    "_AR_REGISTRY_NAME"  = "terraform-cloudbuilder"
    "_IMAGE"             = "terraform"
    "_TERRAFORM_VERSION" = "1.9.5"
    "_REGION"            = var.default_region
    "_REPO"              = "[SSM_REPO_URI]"
    "_REPO_DIR"          = "terraform"
    #"_TAG"               = "$(body.ref)"
  }

  service_account = module.bootstrap_service_accounts["drive-transfer-service-tf"].id
}

resource "google_cloudbuild_trigger" "tf_apply_webhook_triggers" {
  for_each    = toset(var.terraform_environments)
  project     = module.project.project_id
  name        = "${each.value}-terraform-apply-deploy"
  description = "Webhook trigger invoked by SSM to run ${each.value} Terraform Apply"

  webhook_config {
    secret = "${module.secret_manager_secrets["ssm-webhook-secret"].ids["ssm-webhook-secret"]}/versions/latest"
  }

  #filter = "_TAG.matches(\"^refs/tags/tf-apply-${each.value}-.*$\")"
  build {
    timeout     = "1200s"
    logs_bucket = "gs://${module.cb_logs_bucket.name}/tf/${each.value}/apply"
    artifacts {
      objects {
        location = "gs://${module.cb_artifacts_bucket.name}/tf/${each.value}/$BUILD_ID"
        paths = [
          "/workspace/$${_REPO_DIR}/environments/${each.value}/*.plan"
        ]
      }
    }
    options {
      log_streaming_option = "STREAM_ON"
      logging              = "GCS_ONLY"
      machine_type         = "N1_HIGHCPU_32"
    }
    step {
     id         = "git-clone-ssm"
     name       = "gcr.io/cloud-builders/git"
     entrypoint = "sh"
     args = [
       "-xe",
       "-c",
       <<-EOT
       git clone $${_REPO} .
       EOT
     ]
    }
    #step {
    #  id         = "git-fetch-tag"
    #  name       = "gcr.io/cloud-builders/git"
    #  dir        = "$${_REPO_DIR}"
    #  entrypoint = "bash"
    #  args = [
    #    "-xe",
    #    "-c",
    #    <<-EOT
    #    git fetch origin $${_TAG}:$${_TAG} --no-tags
    #    git checkout $${_TAG}
    #    EOT
    #  ]
    #}
    step {
      id         = "tf-init"
      name       = "$${_REGION}-docker.pkg.dev/$${_AR_PROJECT_ID}/$${_AR_REGISTRY_NAME}/$${_IMAGE}:$${_TERRAFORM_VERSION}"
      dir        = "$${_REPO_DIR}/environments/${each.value}"
      entrypoint = "sh"
      args = [
        "-xe",
        "-c",
        <<-EOT
        echo ""
        echo "*************** TERRAFORM INIT ******************"
        echo "******* At environment: ${each.value} *********"
        echo "*************************************************"
        terraform init || exit 1
        EOT
      ]
    }
    step {
      id         = "tf-validate"
      name       = "$${_REGION}-docker.pkg.dev/$${_AR_PROJECT_ID}/$${_AR_REGISTRY_NAME}/$${_IMAGE}:$${_TERRAFORM_VERSION}"
      dir        = "$${_REPO_DIR}/environments/${each.value}"
      entrypoint = "sh"
      args = [
        "-xe",
        "-c",
        <<-EOT
        echo ""
        echo "*************** TERRAFORM VALIDATE ******************"
        echo "******* At environment: ${each.value} *********"
        echo "*************************************************"
        terraform validate || exit 1
        EOT
      ]
    }
    step {
      id         = "tf-plan"
      name       = "$${_REGION}-docker.pkg.dev/$${_AR_PROJECT_ID}/$${_AR_REGISTRY_NAME}/$${_IMAGE}:$${_TERRAFORM_VERSION}"
      dir        = "$${_REPO_DIR}/environments/${each.value}"
      entrypoint = "sh"
      args = [
        "-xe",
        "-c",
        <<-EOT
        echo ""
        echo "*************** TERRAFORM PLAN ******************"
        echo "******* At environment: ${each.value} *********"
        echo "*************************************************"
        terraform plan -input=false -out="/workspace/$${_REPO_DIR}/environments/${each.value}/$${BUILD_ID}_tfplan.plan" || exit 1
        EOT
      ]
    }
    step {
      id         = "tf-apply"
      name       = "$${_REGION}-docker.pkg.dev/$${_AR_PROJECT_ID}/$${_AR_REGISTRY_NAME}/$${_IMAGE}:$${_TERRAFORM_VERSION}"
      dir        = "$${_REPO_DIR}/environments/${each.value}"
      entrypoint = "sh"
      args = [
        "-xe",
        "-c",
        <<-EOT
        echo ""
        echo "*************** TERRAFORM APPLY ******************"
        echo "******* At environment: ${each.value} *********"
        echo "*************************************************"
        terraform apply -auto-approve -input=false "/workspace/$${_REPO_DIR}/environments/${each.value}/$${BUILD_ID}_tfplan.plan" || exit 1
        EOT
      ]
    }
  }

  substitutions = {
    "_AR_PROJECT_ID"     = module.project.project_id
    "_AR_REGISTRY_NAME"  = "terraform-cloudbuilder"
    "_IMAGE"             = "terraform"
    "_TERRAFORM_VERSION" = "1.9.5"
    "_REGION"            = var.default_region
    "_REPO"              = "[SSM_REPO_URI]"
    "_REPO_DIR"          = "terraform"
    #"_TAG"               = "$(body.ref)"
  }

  service_account = module.bootstrap_service_accounts["drive-transfer-service-tf"].id
}

# Manual Container Build Triggers
resource "google_cloudbuild_trigger" "terraform_builder_trigger" {
  project     = module.project.project_id
  name        = "terraform-builder-deploy"
  description = "Manually invoked trigger to build Terraform Builder image"

  webhook_config {
    secret = "${module.secret_manager_secrets["ssm-webhook-secret"].ids["ssm-webhook-secret"]}/versions/latest"
  }

  build {
    logs_bucket = "gs://${module.cb_logs_bucket.name}/terraform-builder"
    options {
      log_streaming_option = "STREAM_ON"
      logging              = "GCS_ONLY"
      machine_type         = "N1_HIGHCPU_32"
    }
    step {
     id         = "git-clone-ssm"
     name       = "gcr.io/cloud-builders/git"
     entrypoint = "sh"
     args = [
       "-xe",
       "-c",
       <<-EOT
       git clone $${_REPO} .
       EOT
     ]
    }
    step {
      id         = "docker-build"
      name       = "gcr.io/cloud-builders/docker"
      dir        = "$${_REPO_DIR}"
      entrypoint = "sh"
      args = [
        "-xe",
        "-c",
        <<-EOT
        docker build \
        -t=$${_REGION}-docker.pkg.dev/$${_AR_PROJECT_ID}/$${_AR_REGISTRY_NAME}/$${_IMAGE}:$${_TF_VERSION} \
        .
        EOT
      ]
    }
    step {
      id   = "docker-push"
      name = "gcr.io/cloud-builders/docker"
      dir  = "$${_REPO_DIR}"
      args = [
        "push",
        "$${_REGION}-docker.pkg.dev/$${_AR_PROJECT_ID}/$${_AR_REGISTRY_NAME}/$${_IMAGE}:$${_TF_VERSION}"
      ]
    }
  }

  substitutions = {
    "_AR_PROJECT_ID"    = module.project.project_id
    "_AR_REGISTRY_NAME" = "terraform-cloudbuilder"
    "_IMAGE"            = "terraform"
    "_TF_VERSION"       = "1.9.5"
    "_REGION"           = var.default_region
    "_REPO"             = "[SSM_REPO_URI]"
    "_REPO_DIR"         = "terraform/modules/terraform-cloudbuilder"
  }

  service_account = module.bootstrap_service_accounts["container-builder"].id
}

resource "google_cloudbuild_trigger" "gcs_fuse_trigger" {
  project     = module.project.project_id
  name        = "gcs-fuse-sidecar-deploy"
  description = "Manually invoked trigger to build GCS Fuse Sidecar image"

  webhook_config {
    secret = "${module.secret_manager_secrets["ssm-webhook-secret"].ids["ssm-webhook-secret"]}/versions/latest"
  }

  build {
    logs_bucket = "gs://${module.cb_logs_bucket.name}/gcs-fuse"
    options {
      log_streaming_option = "STREAM_ON"
      logging              = "GCS_ONLY"
      machine_type         = "N1_HIGHCPU_32"
    }
    step {
      id         = "docker-pull"
      name       = "gcr.io/cloud-builders/docker"
      entrypoint = "sh"
      args = [
        "-xe",
        "-c",
        <<-EOT
        docker pull \
        gcr.io/gke-release/gcs-fuse-csi-driver-sidecar-mounter@sha256:$${_GCS_FUSE_VERSION_SHA}
        EOT
      ]
    }
    step {
      id         = "docker-tag"
      name       = "gcr.io/cloud-builders/docker"
      entrypoint = "sh"
      args = [
        "-xe",
        "-c",
        <<-EOT
        docker tag \
        gcr.io/gke-release/gcs-fuse-csi-driver-sidecar-mounter@sha256:$${_GCS_FUSE_VERSION_SHA} \
        $${_REGION}-docker.pkg.dev/$${_AR_PROJECT_ID}/$${_AR_REGISTRY_NAME}/$${_IMAGE}:latest
        EOT
      ]
    }
    step {
      id   = "docker-push-latest"
      name = "gcr.io/cloud-builders/docker"
      dir  = "$${_REPO_DIR}"
      args = [
        "push",
        "$${_REGION}-docker.pkg.dev/$${_AR_PROJECT_ID}/$${_AR_REGISTRY_NAME}/$${_IMAGE}:latest"
      ]
    }
  }

  substitutions = {
    "_AR_PROJECT_ID"    = module.project.project_id
    "_AR_REGISTRY_NAME" = "drive-transfer-service"
    "_IMAGE"            = "gcs-fuse-csi-driver-sidecar-mounter"
    # IMPORTANT: THIS SHA VALUE SHOULD CHANGE ACCORDING TO GKE VERSION 
    # (https://github.com/GoogleCloudPlatform/gcs-fuse-csi-driver/blob/main/docs/releases.md#gke-compatibility)
    "_GCS_FUSE_VERSION_SHA" = "a527a083127fb456c96a6e4a478639222065dc0c2d485729e63605035d624f8f"
    "_REGION"               = var.default_region
  }

  service_account = module.bootstrap_service_accounts["container-builder"].id
}